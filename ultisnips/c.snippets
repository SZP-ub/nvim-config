
snippet def "#define ..."
#define $1
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[]) {
	${VISUAL}$0
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fora "for-loop" b
for (${1:var}; ${2:condition}; `!p
if len(t[1]) > 0:
	snip.rv = t[1].split('=')[0].split()[-1]
`++) {
	
	$0
} 
endsnippet

# snippet once "Include header once only guard"
# #ifndef ${1:`!p
# if not snip.c:
# 	import random, string
# 	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
# 	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
# 	snip.rv = ('%s_%s' % (name,rand)).upper()
# else:
# 	snip.rv = snip.c`}
# #define $1
# 
# ${VISUAL}$0
# 
# #endif /* end of include guard: $1 */
# endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
    name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
    snip.rv = ('%s_H' % name).upper()
else:
    snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

post_jump "printf_expand_args(snip)"
snippet "printf" "printf with auto-expand args" wr
printf("$1\n"$2);
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

global !p
def split_line(text):
	import textwrap
	lines = textwrap.wrap(text, 78 - 19)
	output = list()
	for line in lines:
		output.append('*' + ' '*19 + line)
	snip_line = snip.tabstops[4].end[0]
	snip.buffer.append(output, snip_line + 1)
	del snip.buffer[snip_line]

def get_args(arglist):
	args = [arg.strip() for arg in arglist.split(',') if arg]
	return args
endglobal

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet head "File Header" b
/******************************************************************************
* File:             `!p snip.rv = fn`
*
* Author:           ${2}  
* Created:          `date +%m/%d/%y` 
* Description:      ${4:${VISUAL}}
*****************************************************************************/
${0}
endsnippet

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet func "Function Header" 
/******************************************************************************
* Function:         $1
* Description:      ${4:${VISUAL}}
* Where:`!p 
snip.rv = ""
snip >> 2

args = get_args(t[2])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $5
* Error:            $6
*****************************************************************************/
${1}($2){
	${0}
}
endsnippet

# #include <...>
snippet inc
#include <${1:stdio}.h>
endsnippet
# #include "..."
snippet Inc
#include "${1:`!p snip.rv = (snip.basename or "name") + ".h"`}"
endsnippet
# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
endsnippet
# if
snippet #if
	#if ${1:FOO}
		${0:${VISUAL}}
	#endif
endsnippet
# Disable C++ name mangling in C headers
snippet nocxx
	#ifdef __cplusplus
	extern "C" {
	#endif

	${0}

	#ifdef __cplusplus
	}
	#endif
endsnippet
##
## Control Statements
# if
snippet if
	if (${1:true}) {
		${0:${VISUAL}}
	}
endsnippet
snippet ife
	if (${1:true}) {
		${2:${VISUAL}}
	} else {
		${0}
	}
# else
endsnippet
snippet el
	else {
		${0:${VISUAL}}
	}
endsnippet
# else if
snippet elif
	else if (${1:true}) {
		${0:${VISUAL}}
	}
endsnippet
# ifi
snippet ifi
	if (${1:true}) ${0};
endsnippet
# ternary
snippet t Ternary: `condition ? true : false`
	$1 ? $2 : $0
endsnippet
# switch
snippet switch
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
	}
endsnippet
# switch without default
snippet switchndef
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
	}
endsnippet
# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
endsnippet
snippet ret
	return ${0};
endsnippet
snippet ex
	exit($0);
endsnippet
##
## Loops
# for
snippet for
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
endsnippet
# for (custom)
snippet forr
	for (int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5}
	}
endsnippet
# while
snippet wh
	while (${1:1}) {
		${0:${VISUAL}}
	}
endsnippet
snippet wht
	while (true) {
		${0:${VISUAL}}
	}
endsnippet
# do... while
snippet do
	do {
		${0:${VISUAL}}
	} while ($1);
endsnippet
##
## Functions
# function definition
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4}
	}
endsnippet
# function definition with zero parameters
snippet fun0
	${1:void} ${2:function_name}()
	{
		${3}
	}
endsnippet
# function definition with Doxygen documentation
snippet dfun0
	${4:void} ${5:function_name}()
	{
		${6}
	}
endsnippet
# function definition with one parameter
snippet fun1
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter})
	{
		${5}
	}
endsnippet
# function definition with one parameter with  Doxygen documentation
snippet dfun1
	${6:void} ${7:function_name}(${8:Type} ${3:Parameter})
	{
		${9}
	}
endsnippet
# function definition with two parameters
snippet fun2
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter})
	{
		${7}
	}
endsnippet
# function definition with two parameters with  Doxygen documentation
snippet dfun2
	${8:void} ${9:function_name}(${10:Type} ${3:Parameter}, ${11:Type} ${5:Parameter})
	{
		${12}
	}
endsnippet
# function definition with three parameters
snippet fun3
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}, ${7:Type} ${8:Parameter})
	{
		${9}
	}
endsnippet
# function definition with three parameters with  Doxygen documentation
snippet dfun3
	${10:void} ${11:function_name}(${12:Type} ${3:Parameter}, ${13:Type} ${5:Parameter}, ${14:Type} ${7:Parameter})
	{
		${15}
	}
endsnippet
# function declaration
snippet fund
	${1:void} ${2:function_name}(${3});
endsnippet
##
## Types
# typedef
snippet ty
typedef ${1:int} ${2:MyCustomType};
endsnippet

# typedef struct
snippet tys
    typedef struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} { 
        ${2:Data}
    } ${1};
endsnippet
# enum
snippet enum
	enum ${1:name} { ${0} };
endsnippet
# typedef enum
snippet tye
	typedef enum {
		${1:Data} 
	} ${2:foo};
endsnippet
##
## Input/Output
# printf
snippet pr
	printf("${1:%s}\n"${2});
endsnippet
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});
endsnippet
snippet prd
	printf("${1:} = %d\n", $1);
endsnippet
snippet prf
	printf("${1:} = %f\n", $1);
endsnippet
snippet prx
	printf("${1:} = %${2}\n", $1);
endsnippet
snippet warn
	warn("${1:%s}"$0);
endsnippet
snippet warnx
	warnx("${1:%s}"$0);
endsnippet
snippet err
	err(${1:1}, "${2:%s}"$0);
endsnippet
snippet errx
	errx(${1:1}, "${2:%s}"$0);
endsnippet
# getopt
snippet getopt
	int choice;
	while (1)
	{
		static struct option long_options[] =
		{
			{"version", no_argument,	0,	'v'},
			{"help",	no_argument,	0,	'h'},
			${1}
			{0,0,0,0}
		};

		int option_index = 0;

		choice = getopt_long( argc, argv, "vh",
					long_options, &option_index);

		if (choice == -1)
			break;

		switch( choice )
		{
			case 'v':
				${2}
				break;

			case 'h':
				${3}
				break;

			case '?':
				break;

			default:
				return EXIT_FAILURE;
		}
	}

	if ( optind < argc )
	{
		while ( optind < argc )
		{
			${0}
		}
	}

endsnippet
## Assertions
snippet asr
	assert($1);
endsnippet

snippet null
	NULL;
endsnippet

snippet anl
	assert(${1:ptr} != NULL);
endsnippet

## Dynamic Allocation
snippet mlcd
	${1:ptr} = (${2:type}*) malloc(${3:size}, sizeof($2));
endsnippet

snippet clcd
	${1:ptr} = (${2:type}*) calloc(${3:size}, sizeof($2));
endsnippet

snippet rlcd
	${1:ptr} = realloc($1, ${2:size} * sizeof(${3:type}));
endsnippet

snippet mlc
	${1:type} ${2:ptr} = ($1*) malloc(sizeof($1));
	if(!$2) return ${3};
endsnippet

snippet clc
	${1:type} ${2:ptr} = ($1*) calloc(${3:size}, sizeof($1));
endsnippet

snippet fre
	free(${1:ptr});
endsnippet

##
# TODO section
snippet todo
	/*! TODO: ${1:Todo description here}
	 *  \todo $1
	 */
endsnippet
## Miscellaneous
# This is kind of convenient
snippet .
	[${1}]
endsnippet

snippet asm
	__asm__ __volatile__(
	"${0}\n\t"
	:
	:
	);
endsnippet

